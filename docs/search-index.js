var searchIndex = JSON.parse('{\
"detour":{"doc":"Constructs Detour Graph","t":[3,3,3,3,3,12,12,0,11,11,11,11,11,11,11,11,0,0,12,11,11,11,12,11,11,11,11,5,5,0,11,11,11,11,11,5,12,12,12,12,0,12,12,12,0,11,11,11,11,11,11,11,11,11,11,0,12,12,5,3,4,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,12,12,5,12,12,12,12,11,11,11,11,11,11,11,11,12,12,17,17,17,5,5,0,0,0,0,0,0,3,13,13,6,13,4,13,3,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,3,11,12,11,11,11,11,5,12,11,11,11,11,11,11,11,5,11,11,11,12,12,11,11,5,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,12,12,12,11,11,11,11,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,0,0,5,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,5,5,11,11,11,11,5,12,11,11,11,12,12,6,3,6,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,3,11,11,11,12,11,11,11,11,12,11,11,11,3,11,11,12,11,11,11,11,12,11,12,12,12,12,11,11,11,12,4,13,13,3,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,3,11,11,5,11,11,11,12,11,11,11,11,3,11,11,12,11,11,11,12,11,11,11,11,3,8,5,5,5,11,11,11,11,5,5,11,12,11,11,10,10,5,5,5,5,12,11,11,11,5],"n":["CHFilter","CONFIG","STATS","Statistics","StopDetector","__private_field","__private_field","arguments","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","coord","current_bbox","default","deref","deref","edge_merges","fmt","from","from","from","from_epsg_3857_to_4326","from_epsg_4326_to_3857","graph","initialize","initialize","into","into","into","main","max_diagonal_meters","min_duration_ms","node_merges","node_splits","parser","redundant_node_removals","redundant_trj_removals","stream","time_guard","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utility","window","window_size","parse_arguments","Config","ConfigKeys","ConnectionTimeout","EpsilonVelocity","MaxHausdorffMeters","MinimumVelocity","MotionDetectorTimespan","RelaxBboxMeters","RelaxBboxMinutes","StopDiagonalMeters","StopDurationMinutes","VisvalingamThreshold","WindowSize","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","connection_timeout","default","epsilon_velocity","fmt","fmt","from","from","from_str","into","into","max_hausdorff_meters","minimum_velocity","motion_detector_timespan","parse_config","relax_bbox_meters","relax_bbox_minutes","stop_diagonal_meters","stop_duration_minutes","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","visvalingam_threshold","window_size","DEG","RAD","RADIUS","from_epsg_3857_to_4326","from_epsg_4326_to_3857","graph","graph_builder","path","path_builder","path_builder_stats","path_element","DetourGraph","DifferentRoot","DoubleRoot","EdgeClusters","NonRoots","RootCase","SameRoot","TimePairs","a","add_path","b","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","copy_edges","eq","equivalent","find_matching_nodes","fix_temporal_monotonicity","from","from","from","get_dominant_roots","get_edge_group_clusters","get_edge_groups","get_root_case","get_root_index","get_temporal_splits","get_trjs_in_timeframe","graph","hash","into","into","into","merge_edges","merge_node_pair","merge_nodes","ne","new","reassign_edges","replace_edges","root_reachable","roots","should_split","shrink_node","split_bbox","split_node","split_node_at","to_csv","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_constraints","verify_node","verify_temporal_monotonicity","get_graph","Path","add_points","borrow","borrow_mut","clone","clone_into","expand_stops","fmt","fmt","from","into","is_empty","last_element","len","merge_nodes","new","next_trj_stop","path","push","remove_first","remove_last","replace_last_bbox","rm_single_points","to_owned","to_string","try_from","try_into","type_id","verify","PathBuilder","PointsForElement","add_pt","bbox","borrow","borrow","borrow_mut","borrow_mut","build_path","building_initial_stop","clone","clone_into","finalize_path","fmt","from","from","get_path","get_paths","into","into","new","path","pts","push","reset","split_stream_on_timeout","to_owned","to_route","to_stop","trj","try_from","try_from","try_into","try_into","type_id","type_id","PathBuilderStats","borrow","borrow_mut","default","fmt","fmt","from","into","path_lens","streams_handled","timeouts","to_string","try_from","try_into","type_id","PathElement","Route","Stop","borrow","borrow_mut","clone","clone_into","copy_bbox","copy_trj","fmt","fmt","from","into","is_stop","new_route","new_stop","set_bbox","to_owned","to_string","try_from","try_into","type_id","update_element","parse","parse_gpx","parse_plt","clean_stream","bounding_box","ch_filter","clustering","get_distance","line","motion_detector","stop_detector","time_guard","timeout_handler","trajectory","visvalingam","Bbox","borrow","borrow_mut","can_contain_trj","clone","clone_into","cmp","contains_point","eq","equivalent","expand","expand_along_trjs","fmt","fmt","from","get_diameter","insert_point","into","is_before","is_in_spatial","is_in_temporal","is_single_point","new","overlaps","partial_cmp","t1","t2","temporal_split","to_owned","to_string","try_from","try_into","type_id","union","verify","verify_spatial","verify_temporal","x1","x2","y1","y2","CHFilter","borrow","borrow_mut","from","get_convex_hull_trj","get_spikes","into","into_iter","new","next","remove_spikes","stream","try_from","try_into","type_id","window","window_size","ClusterIdx","Clustering","MatrixIdx","add_to_cluster","borrow","borrow_mut","clusters","distance_matrix","from","get_cluster_idx","into","merge_clusters","new","partition","threshold","try_from","try_into","type_id","Line","advance","borrow","borrow_mut","end","from","intersection","into","length","start","try_from","try_into","type_id","MotionDetector","borrow","borrow_mut","eps","from","get_avg_velocity","into","is_stopped","min_velocity","new","ref_pt","spt_ivls","timespan","tmp_ivls","try_from","try_into","type_id","was_stopped","IsStopped","Maybe","No","StopDetector","Yes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","current_bbox","eq","equivalent","fmt","fmt","from","from","into","into","is_stopped","max_diagonal_meters","min_duration_ms","new","reset","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","TimeGuard","borrow","borrow_mut","clean_stream","from","into","is_ok","last_time","new","try_from","try_into","type_id","TimeoutHandler","borrow","borrow_mut","connection_timeout","from","into","is_alive","last_read","new","try_from","try_into","type_id","Interpolator","Monotone","align_start_time","align_time_to_zero","average","borrow","borrow_mut","from","from","get_common_time_span","get_min","get_point","idx","interpolate","into","is_monotone","make_monotone","mean_point","merge","morph_to_fit","trim","trj","try_from","try_into","type_id","visvalingam"],"q":["detour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::arguments","detour::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::coord","","","","","detour::graph","","","","","","detour::graph::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::graph::graph_builder","detour::graph::path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::graph::path_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::graph::path_builder_stats","","","","","","","","","","","","","","","detour::graph::path_element","","","","","","","","","","","","","","","","","","","","","","","detour::parser","","","detour::time_guard","detour::utility","","","","","","","","","","","detour::utility::bounding_box","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::ch_filter","","","","","","","","","","","","","","","","","detour::utility::clustering","","","","","","","","","","","","","","","","","","detour::utility::line","","","","","","","","","","","","","detour::utility::motion_detector","","","","","","","","","","","","","","","","","","detour::utility::stop_detector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::time_guard","","","","","","","","","","","","detour::utility::timeout_handler","","","","","","","","","","","","detour::utility::trajectory","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::visvalingam"],"d":["Applies the convex hull filter described by Adhinugraha …","","","","Detect if the object is stopped. If the movements of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Various utilities","","","","","","","","","","","","","","","","","","","","","","","Maximal number of milliseconds between two measurements …","","If the object moves faster than <code>minimum_velocity</code> plus …","","","","","","","","If two trajectories belonging to the same edge have a …","If the object moves slower than this it is considered to …","The timespan used by the <code>MotionDetector</code> to calculate …","Parses config.cfg in the root folder into a Config struct","When searching for matching stops allow them to be this …","When searching for matching stops allow them to be this …","Maximal diagonal size of a geofenced region. If movement …","The least amount of time that movement must occur within …","","","","","","","","","Threshold for Visvalingam algorithm.","Number of points used in the CH-filter.","","","","","","","","","","","","","One of the nodes has this idx in the root list. The other …","Both nodes are in the root list.","","None of the nodes are root nodes","","One of the nodes has this idx in the root list. The other …","","","","","","","","","","","","","","","","","","","If any edge (a,b) breaks temporal monotonicity -> false.","","","","Returns indices of nodes in self.roots from which nx can …","","","","Returns Some(index) of <code>nx</code> in the roots list or None","","Return edge indices connected to node that potentially …","","","","","","","Merges a pair of nodes and returns the new node index","","","","","","","","","Shrink bbox based on points of connected trajectories. …","","","","Writes the graph to the output folder.","","","","","","","","","","","","","Checks and returns a tuple with the following for the …","If any edge (a,b) breaks temporal monotonicity -> false.","Returns a detour graph when given a vector of …","","","","","","","Stops are expanded along the routes they are connected to.…","","","","","","","","Tests if the trj between two consecutive bboxs can be …","","","","","","","Replace the <code>Bbox</code> last in the path.","Remove consecutive single point nodes If the granularity …","","","","","","","","Stores points until we can classify them as either <code>Stop</code> …","All points are added to a trajectory. Initially, a stop …","","","","","","Classify stops and routes of a stream","","","","","","","","","Returns a vector of paths given a stream","","","","","","","Remove all points","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if content is GPX or PLT and parses content. …","Parses a string containing GPX data.","Parses a string containing PLT data.","Filters away points in the stream that lie temporally …","","","","Returns Euclidean distance in meters","","","","","","","","","","","","","","","","","","","Expands the bbox along the trajectories. TODO: When …","","","","Returns the squared diameter of the bbox.","Inserts <code>point</code> and expands <code>Bbox</code> if neccesary.","","Determine if other ‘Bbox’ is temporally before ‘self…","","","","","","","","","Splits Bbox temporally at <code>t</code>.","","","","","","","Verifies if bbox satisfies the constraints given in config","Verifies if bbox satisfies the spatial constraints given …","Verifies if bbox satisfies the temporal constraints given …","","","","","Applies the convex hull filter described by Adhinugraha …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If (min_velocity + eps > average velocity) then it is …","","calculate average velocity of points in tmp_ivls and …","","Returns true if the object is stopped.","Minimum velocity in km/h","","Reference point for calculating intervals","Spatial intervals (in meters) in timespan","Milliseconds of measurements to consider","Temporal intervals in timespan","","","","Was the last point a ‘stop’","","","","Detect if the object is stopped. If the movements of the …","","","","","","","","","","","","","","","","","","","","","Clear the bbox used for detection.","","","","","","","","","","","Filters away points in the stream that lie temporally …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,0,1,3,2,1,3,2,3,3,0,0,4,3,1,2,3,3,1,3,2,0,0,0,1,2,1,3,2,0,4,4,3,3,0,3,3,5,0,3,1,3,2,1,3,2,1,3,2,0,5,5,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,7,6,7,7,7,7,7,7,7,7,6,7,6,6,7,7,7,7,0,7,7,7,7,7,7,6,7,6,7,6,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,8,0,8,0,9,10,9,8,9,10,8,9,10,9,10,9,10,10,9,9,10,10,8,9,10,10,10,10,10,10,10,10,10,9,8,9,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,9,10,8,9,10,8,9,10,8,9,10,10,10,10,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,12,12,13,12,13,0,12,13,13,12,13,12,13,12,0,12,13,12,12,13,13,13,0,13,13,13,12,12,13,12,13,12,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,5,5,5,0,0,5,5,5,5,0,5,5,5,5,5,5,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,0,20,4,20,4,20,20,20,4,20,20,4,20,4,20,4,20,4,4,4,4,4,20,4,20,4,20,4,20,0,21,21,0,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,23,23,23,23,0,0,23,23,23,23,24,24,0,0,0,0,23,23,23,23,0],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["statistics",3]],[[]],null,null,null,[[],["statistics",3]],[[],["config",3]],[[],["mutex",3]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["config",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["config",3]],[[]],null,[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["result",4,["configkeys"]],["configkeys",4]]],[[]],[[]],null,null,null,[[["string",3]],["config",3]],null,null,null,null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["path",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["timepairs",3]],[[],["detourgraph",3]],[[]],[[]],[[["nodeindex",3]]],[[["timepairs",3]],["bool",15]],[[],["bool",15]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["nodeindex",3]],[["vec",3,["usize"]],["usize",15]]],[[],[["vec",3,["vec"]],["vec",3,["edgeindex"]]]],[[],[["vec",3,["edgeindex"]],["hashmap",3,["vec"]]]],[[["nodeindex",3]],["rootcase",4]],[[["nodeindex",3]],[["usize",15],["option",4,["usize"]]]],[[["nodeindex",3]],[["vec",3,["f64"]],["f64",15]]],[[["nodeindex",3]],[["vec",3,["edgeindex"]],["edgeindex",3]]],null,[[]],[[]],[[]],[[]],[[]],[[["nodeindex",3]],["nodeindex",3]],[[]],[[["timepairs",3]],["bool",15]],[[],["detourgraph",3]],[[["edgedirection",4],["nodeindex",3]]],[[["vec",3],["nodeindex",3]]],[[["nodeindex",3]],["bool",15]],null,[[["nodeindex",3]],["bool",15]],[[["nodeindex",3]]],[[["bbox",3]],[["bbox",3],["vec",3,["bbox"]]]],[[["nodeindex",3]]],[[["nodeindex",3]]],[[],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[["nodeindex",3]]],[[],["bool",15]],[[["vec",3,["vec"]],["vec",3]],["detourgraph",3]],null,[[]],[[]],[[]],[[],["path",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],[["option",4,["pathelement"]],["pathelement",4]]],[[],["usize",15]],[[]],[[]],[[],["option",4]],null,[[["pathelement",4]]],[[],["pathelement",4]],[[],["pathelement",4]],[[["bbox",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],null,null,[[["isstopped",4]]],null,[[]],[[]],[[]],[[]],[[["vec",3]],["path",3]],null,[[],["pointsforelement",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["path",3]],[[["pathbuilderstats",3],["vec",3]],[["vec",3,["path"]],["path",3]]],[[]],[[]],[[],["pathbuilder",3]],null,null,[[]],[[]],[[["pathbuilderstats",3]],[["vec",3,["vec"]],["vec",3]]],[[]],[[],["pathelement",4]],[[],["pathelement",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],["pathbuilderstats",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["pathelement",4]],[[]],[[],[["option",4,["bbox"]],["bbox",3]]],[[],[["option",4,["vec"]],["vec",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["bbox",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["vec",3]],["vec",3]],null,null,null,[[],["f64",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["bool",15]],[[],["bbox",3]],[[]],[[],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["f64",15]]],[[["f64",15],["option",4,["f64"]],["vec",3,["vec"]],["vec",3]],["bbox",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["f64",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bbox",3]],[[],["bool",15]],[[],[["option",4,["ordering"]],["ordering",4]]],null,null,[[["f64",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[]],[[]],[[]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[]],[[]],[[["usize",15]],["chfilter",3]],[[],["option",4]],[[["vec",3]],["vec",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["usize",15],["option",4,["usize"]]]],[[]],[[]],null,null,[[]],[[["usize",15]],["usize",15]],[[]],[[["usize",15]]],[[["f64",15],["vec",3,["vec"]],["vec",3,["f64"]]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[]],[[["line",3]],["option",4]],[[]],[[],["f64",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[],["f64",15]],[[]],[[],["isstopped",4]],null,[[],["motiondetector",3]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["isstopped",4]],[[]],null,[[["isstopped",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["isstopped",4]],null,null,[[],["stopdetector",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["vec",3]],["vec",3]],[[]],[[]],[[],["bool",15]],null,[[],["timeguard",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[],["bool",15]],null,[[["f64",15]],["timeouthandler",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[["vec",3]],["vec",3]],[[],["vec",3]],[[]],[[]],[[["vec",3]]],[[]],[[],["option",4]],[[["iter",3],["peekable",3,["iter"]]]],[[["f64",15]]],null,[[["f64",15]]],[[]],[[],["bool",15]],[[]],[[]],[[],["vec",3]],[[]],[[["f64",15]],["vec",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["f64",15]],["vec",3]]],"p":[[3,"CONFIG"],[3,"STATS"],[3,"Statistics"],[3,"StopDetector"],[3,"CHFilter"],[4,"ConfigKeys"],[3,"Config"],[4,"RootCase"],[3,"TimePairs"],[3,"DetourGraph"],[3,"Path"],[3,"PathBuilder"],[3,"PointsForElement"],[3,"PathBuilderStats"],[4,"PathElement"],[3,"Bbox"],[3,"Clustering"],[3,"Line"],[3,"MotionDetector"],[4,"IsStopped"],[3,"TimeGuard"],[3,"TimeoutHandler"],[3,"Interpolator"],[8,"Monotone"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};