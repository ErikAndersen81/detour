var searchIndex = JSON.parse('{\
"detour":{"doc":"Constructs Detour Graph","t":[3,3,3,8,3,0,11,11,12,11,11,11,12,11,11,0,11,0,12,12,11,11,11,11,11,0,11,11,12,11,11,11,11,5,11,0,12,12,10,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,0,11,11,11,0,12,12,11,12,12,5,3,4,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,12,12,5,12,12,12,12,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,12,11,11,11,11,12,12,3,13,13,6,13,4,13,3,12,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,0,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,6,3,3,4,8,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,12,5,5,0,0,0,5,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,5,5,11,11,11,11,5,12,11,11,11,12,12,6,3,6,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,3,11,11,11,12,11,11,11,11,12,11,11,11,3,11,11,12,11,11,11,11,12,11,12,12,12,12,11,11,11,12,3,11,11,12,12,11,11,11,11,11,12,11,11,11,3,11,11,5,11,11,11,12,11,11,11,11,3,11,11,12,11,11,11,12,11,11,11,11,3,8,5,5,5,11,11,11,11,5,5,11,12,11,11,10,10,5,5,5,5,12,11,11,11,5],"n":["BufReader","CHFilter","Coord","Read","StopDetector","arguments","borrow","borrow_mut","buf","buffer","by_ref","bytes","cap","capacity","chain","config","consume","coord","diagonal_meters","duration_ms","fill_buf","fmt","from","get_mut","get_ref","graph","initializer","initializer","inner","into","into_inner","is_read_vectored","is_read_vectored","main","new","parser","points","pos","read","read","read_exact","read_exact","read_to_end","read_to_end","read_to_string","read_to_string","read_vectored","read_vectored","seek","seek_relative","stream","stream_position","t","take","time_guard","try_from","try_into","type_id","utility","window","window_size","with_capacity","x","y","parse_arguments","Config","ConfigKeys","ConnectionTimeout","EpsilonVelocity","MaxHausdorffMeters","MinimumVelocity","RelaxBboxMeters","RelaxBboxMinutes","StopDiagonalMeters","StopDurationMinutes","VisvalingamThreshold","WindowSize","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","connection_timeout","default","epsilon_velocity","fmt","from","from","from_str","into","into","max_hausdorff_meters","minimum_velocity","parse_config","relax_bbox_meters","relax_bbox_minutes","stop_diagonal_meters","stop_duration_minutes","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","visvalingam_threshold","window_size","Coord","borrow","borrow_mut","from","from_gps","into","t","to_gps","try_from","try_into","type_id","x","y","DetourGraph","DifferentRoot","DoubleRoot","EdgeClusters","NonRoots","RootCase","SameRoot","TimePairs","a","add_path","b","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","copy_edges","eq","equivalent","find_matching_nodes","from","from","from","get_dominant_roots","get_edge_group_clusters","get_edge_groups","get_root_case","get_root_index","get_temporal_splits","get_trjs_in_timeframe","graph","graph_builder","hash","into","into","into","make_acyclic","merge_edges","merge_nodes","ne","new","pathbuilder","reassign_edges","replace_edges","root_reachable","roots","should_split","split_bbox","split_node","to_csv","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_constraints","verify_node","verify_temporal_monotonicity","0","0","0","get_graph","Path","PathBuilder","PathBuilderError","PathElement","PathTrait","PointsForElement","Route","Route","Stop","Stop","add_point","add_pt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_path","clone","clone","clone","clone_into","clone_into","clone_into","cut_route","finalize_path","fmt","fmt","fmt","fmt","from","from","from","from","get_bbox","get_path","get_paths","get_points","get_trj","into","into","into","into","is_stop","is_stop","new","path","path_element","split_stream_on_timeout","stop_from","to_owned","to_owned","to_owned","to_path_element","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","0","0","0","0","parse_gpx","clean_stream","bounding_box","ch_filter","clustering","get_distance","line","motion_detector","stop_detector","time_guard","timeout_handler","trajectory","visvalingam","Bbox","borrow","borrow_mut","clone","clone_into","cmp","contains_point","eq","equivalent","expand","fmt","fmt","from","get_diameter","into","is_before","is_in_spatial","is_in_temporal","new","overlaps","partial_cmp","t1","t2","temporal_split","to_owned","to_string","try_from","try_into","type_id","union","x1","x2","y1","y2","CHFilter","borrow","borrow_mut","from","get_convex_hull_trj","get_spikes","into","into_iter","new","next","remove_spikes","stream","try_from","try_into","type_id","window","window_size","ClusterIdx","Clustering","MatrixIdx","add_to_cluster","borrow","borrow_mut","clusters","distance_matrix","from","get_cluster_idx","into","merge_clusters","new","partition","threshold","try_from","try_into","type_id","Line","advance","borrow","borrow_mut","end","from","intersection","into","length","start","try_from","try_into","type_id","MotionDetector","borrow","borrow_mut","eps","from","get_avg_velocity","into","is_stopped","min_velocity","new","ref_pt","spt_ivls","timespan","tmp_ivls","try_from","try_into","type_id","was_stopped","StopDetector","borrow","borrow_mut","diagonal_meters","duration_ms","fit_to_timespan","from","into","is_stopped","new","points","try_from","try_into","type_id","TimeGuard","borrow","borrow_mut","clean_stream","from","into","is_ok","last_time","new","try_from","try_into","type_id","TimeoutHandler","borrow","borrow_mut","connection_timeout","from","into","is_alive","last_read","new","try_from","try_into","type_id","Interpolator","Monotone","align_start_time","align_time_to_zero","average","borrow","borrow_mut","from","from","get_common_time_span","get_min","get_point","idx","interpolate","into","is_monotone","make_monotone","mean_point","merge","morph_to_fit","trim","trj","try_from","try_into","type_id","visvalingam"],"q":["detour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::arguments","detour::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::coord","","","","","","","","","","","","","detour::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::graph::RootCase","","","detour::graph::graph_builder","detour::graph::pathbuilder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::graph::pathbuilder::PathElement","","detour::graph::pathbuilder::PointsForElement","","detour::parser","detour::time_guard","detour::utility","","","","","","","","","","","detour::utility::bounding_box","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::ch_filter","","","","","","","","","","","","","","","","","detour::utility::clustering","","","","","","","","","","","","","","","","","","detour::utility::line","","","","","","","","","","","","","detour::utility::motion_detector","","","","","","","","","","","","","","","","","","detour::utility::stop_detector","","","","","","","","","","","","","","detour::utility::time_guard","","","","","","","","","","","","detour::utility::timeout_handler","","","","","","","","","","","","detour::utility::trajectory","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::visvalingam"],"d":["The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.","Applies the convex hull filter described by Adhinugraha et …","Holds coordinates in UTM projection.","The <code>Read</code> trait allows for reading bytes from a source.","Detect if the object is stopped. If the movements of the …","","","","","Returns a reference to the internally buffered data.","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","","Returns the number of bytes the internal buffer can hold …","Creates an adapter which will chain this stream with …","","","","","","","","","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","","","Determines if this <code>Read</code>er can work with buffers of …","","","Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","","Creates a new <code>BufReader&lt;R&gt;</code> with a default buffer capacity. …","","","","Pull some bytes from this source into the specified …","","","Read the exact number of bytes required to fill <code>buf</code>.","","Read all bytes until EOF in this source, placing them into …","","Read all bytes until EOF in this source, appending them to …","","Like <code>read</code>, except that it reads into a slice of buffers.","Seek to an offset, in bytes, in the underlying reader.","Seeks relative to the current position. If the new …","","Returns the current seek position from the start of the …","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","Various utilities","","","Creates a new <code>BufReader&lt;R&gt;</code> with the specified buffer …","","","","","","","","","","","","","","","","","","","","","","Maximal number of milliseconds between two measurements …","","If the object moves faster than <code>minimum_velocity</code> plus this …","","","","","","","If two trajectories belonging to the same edge have a …","If the object moves slower than this it is considered to …","Parses config.cfg in the root folder into a Config struct","When searching for matching stops allow them to be this …","When searching for matching stops allow them to be this …","Maximal diagonal size of a geofenced region. If movement …","The least amount of time that movement must occur within a …","","","","","","","","Threshold for Visvalingam algorithm.","Number of points used in the CH-filter.","Holds coordinates in UTM projection.","","","","Create a UTM projected coordinate from GPS-Coordinates ‘…","","","Converts to GPS ‘(lon, lat, time)’ assuming UTM …","","","","","","","One of the nodes has this idx in the root list. The other …","Both nodes are in the root list.","","None of the nodes are root nodes","","One of the nodes has this idx in the root list. The other …","","","","","","","","","","","","","","","","","","","","","","","Returns indices of nodes in self.roots from which nx can …","","","","","","Return edge indices connected to node that potentially …","","","","","","","","","","","","","","","","","","","","Writes the graph to the output folder.","","","","","","","","","","","","","Checks and returns a tuple with the following for the …","If any edge (a,b) breaks temporal monotonicity -&gt; false.","","","","Returns a detour graph when given a vector of preprocessed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector of paths given a stream","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a string containing GPX data.","Filters away points in the stream that lie temporally …","","","","Returns Euclidean distance in meters","","","","","","","","","","","","","","","","","","","","","","","Determine if other ‘Bbox’ is temporally before ‘self…","","","","","","","","Splits Bbox temporally at <code>t</code>.","","","","","","","","","","","Applies the convex hull filter described by Adhinugraha et …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If (min_velocity + eps &gt; average velocity) then it is …","","calculate average velocity of points in tmp_ivls and …","","Returns true if the object is stopped.","Minimum velocity in km/h","","Reference point for calculating intervals","Spatial intervals (in meters) in timespan","Milliseconds of measurements to consider","Temporal intervals in timespan","","","","Was the last point a ‘stop’","Detect if the object is stopped. If the movements of the …","","","","","","","","","","","","","","","","","Filters away points in the stream that lie temporally …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,2,2,1,1,2,0,1,0,3,3,1,1,1,1,1,0,1,2,1,1,1,1,2,0,1,0,3,1,2,1,1,2,1,2,1,2,1,2,1,1,4,1,5,2,0,1,1,1,0,4,4,1,5,5,0,0,0,6,6,6,6,6,6,6,6,6,6,6,7,6,7,7,7,7,7,7,7,6,7,6,6,7,7,7,0,7,7,7,7,7,6,7,6,7,6,7,7,7,0,5,5,5,5,5,5,5,5,5,5,5,5,0,8,8,0,8,0,8,0,9,10,9,8,9,10,8,9,10,9,10,9,10,10,10,9,9,10,8,9,10,10,10,10,10,10,10,10,10,0,9,8,9,10,10,10,10,9,10,0,10,10,10,10,10,10,10,10,9,10,8,9,10,8,9,10,8,9,10,10,10,10,11,12,13,0,0,0,0,0,0,0,14,15,14,15,15,16,16,14,15,17,16,14,15,17,0,14,15,17,14,15,17,16,16,14,15,17,17,16,14,15,17,14,16,0,15,14,16,14,15,17,14,15,16,16,16,0,14,14,15,17,15,17,16,14,15,17,16,14,15,17,16,14,15,17,18,19,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,4,4,4,0,0,4,4,4,4,0,4,4,4,4,4,4,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,27,27,0,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,29,29,29,29,0,0,29,29,29,29,30,30,0,0,0,0,29,29,29,29,0],"f":[null,null,null,null,null,null,[[]],[[]],null,[[]],[[]],[[],["bytes",3]],null,[[],["usize",15]],[[],["chain",3]],null,[[["usize",15]]],null,null,null,[[],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],null,[[],["initializer",3]],[[],["initializer",3]],null,[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bufreader",3]],null,null,null,[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["vec",3]],["result",4,[["usize",15],["error",3]]]],[[["vec",3]],["result",4,[["usize",15],["error",3]]]],[[["string",3]],["result",4,[["usize",15],["error",3]]]],[[["string",3]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[["seekfrom",4]],["result",4,[["u64",15],["error",3]]]],[[["i64",15]],["result",4,[["error",3]]]],null,[[],["result",4,[["u64",15],["error",3]]]],null,[[["u64",15]],["take",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["usize",15]],["bufreader",3]],null,null,[[],["config",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["config",3]],[[]],null,[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],["result",4,[["configkeys",4]]]],[[]],[[]],null,null,[[["string",3]],["config",3]],null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["vec",3,[["pathelement",4]]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["timepairs",3]],[[],["detourgraph",3]],[[]],[[]],null,[[["nodeindex",3],["nodeindex",3]]],[[["timepairs",3]],["bool",15]],[[],["bool",15]],[[],["option",4]],[[]],[[]],[[]],[[["nodeindex",3]],["vec",3,[["usize",15]]]],[[],["vec",3,[["vec",3,[["edgeindex",3]]]]]],[[],["hashmap",3,[["vec",3,[["edgeindex",3]]]]]],[[["nodeindex",3],["nodeindex",3]],["rootcase",4]],[[["nodeindex",3]],["option",4,[["usize",15]]]],[[["nodeindex",3]],["vec",3,[["f64",15]]]],[[["nodeindex",3]],["vec",3,[["edgeindex",3]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["timepairs",3]],["bool",15]],[[["config",3]],["detourgraph",3]],null,[[["nodeindex",3],["edgedirection",4]]],[[["nodeindex",3],["nodeindex",3],["vec",3]]],[[["nodeindex",3]],["bool",15]],null,[[["nodeindex",3]],["bool",15]],[[["bbox",3]],["vec",3,[["bbox",3]]]],[[["nodeindex",3]]],[[],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[["nodeindex",3]]],[[],["bool",15]],null,null,null,[[["vec",3,[["vec",3]]],["config",3]],["detourgraph",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["config",3]],["vec",3,[["pathelement",4]]]],[[],["pathelement",4]],[[],["pointsforelement",4]],[[],["pathbuildererror",3]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4,[["bbox",3]]]],[[],["vec",3,[["pathelement",4]]]],[[["vec",3],["config",3]],["vec",3,[["vec",3,[["pathelement",4]]]]]],[[],["vec",3]],[[],["option",4,[["vec",3]]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["pathbuilder",3]],null,null,[[["f64",15]],["vec",3,[["vec",3]]]],[[],["pathelement",4]],[[]],[[]],[[]],[[],["pathelement",4]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,null,null,null,[[["string",3]],["vec",3,[["vec",3]]]],[[["vec",3]],["vec",3]],null,null,null,[[],["f64",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["bbox",3]],[[]],[[],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["f64",15],["f64",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["f64",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bbox",3]],[[],["bool",15]],[[],["option",4,[["ordering",4]]]],null,null,[[["f64",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[]],[[]],[[["usize",15]],["chfilter",3]],[[],["option",4]],[[["vec",3],["vec",3]],["vec",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["option",4,[["usize",15]]]]],[[]],[[]],null,null,[[]],[[["usize",15]],["usize",15]],[[]],[[["usize",15],["usize",15]]],[[["vec",3,[["vec",3,[["f64",15]]]]],["f64",15]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[]],[[["line",3]],["option",4]],[[]],[[],["f64",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[],["f64",15]],[[]],[[],["bool",15]],null,[[["config",3]],["motiondetector",3]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[["config",3]],["stopdetector",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["vec",3]],["vec",3]],[[]],[[]],[[],["bool",15]],null,[[],["timeguard",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[],["bool",15]],null,[[["f64",15]],["timeouthandler",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[["vec",3]],["vec",3]],[[],["vec",3]],[[]],[[]],[[["vec",3]]],[[]],[[],["option",4]],[[["peekable",3,[["iter",3]]],["peekable",3,[["iter",3]]]]],[[["f64",15]]],null,[[["f64",15]]],[[]],[[],["bool",15]],[[]],[[]],[[["config",3]],["vec",3]],[[]],[[["f64",15],["f64",15]],["vec",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["f64",15]],["vec",3]]],"p":[[3,"BufReader"],[8,"Read"],[3,"StopDetector"],[3,"CHFilter"],[3,"Coord"],[4,"ConfigKeys"],[3,"Config"],[4,"RootCase"],[3,"TimePairs"],[3,"DetourGraph"],[13,"DifferentRoot"],[13,"SameRoot"],[13,"DoubleRoot"],[4,"PathElement"],[4,"PointsForElement"],[3,"PathBuilder"],[3,"PathBuilderError"],[8,"PathTrait"],[13,"Stop"],[13,"Route"],[13,"Stop"],[13,"Route"],[3,"Bbox"],[3,"Clustering"],[3,"Line"],[3,"MotionDetector"],[3,"TimeGuard"],[3,"TimeoutHandler"],[3,"Interpolator"],[8,"Monotone"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};