var searchIndex = JSON.parse('{\
"detour":{"doc":"Constructs Detour Graph","t":[3,3,3,3,3,3,3,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,11,11,11,11,11,12,11,11,11,11,11,11,5,5,0,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,0,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,13,3,4,13,3,11,11,11,11,11,11,12,11,11,12,11,11,11,12,12,11,11,11,12,5,12,12,11,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,12,11,11,12,11,11,11,11,12,12,12,5,11,11,11,11,11,11,12,12,17,17,17,5,5,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,3,6,3,8,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,5,5,5,17,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,11,12,11,11,5,12,11,11,11,5,11,11,12,5,12,11,11,11,3,11,11,11,11,11,11,11,12,12,12,11,11,11,11,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,0,0,0,5,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,5,5,11,11,11,11,5,12,11,11,11,12,12,6,3,6,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,3,11,11,11,12,11,11,11,11,12,11,11,11,3,11,11,12,11,11,11,11,12,11,12,12,12,12,11,11,11,12,4,13,13,3,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,3,11,11,5,11,11,11,12,11,11,11,11,3,11,11,12,11,11,11,12,11,11,11,11,3,8,8,6,5,5,11,11,10,11,11,11,12,5,11,10,10,5,5,5,10,12,11,11,11,5],"n":["CHFilter","CLUSTERINGARGS","CONFIG","OUTPUT","STATS","Statistics","StopDetector","__private_field","__private_field","__private_field","__private_field","arguments","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","coord","current_bbox","default","deref","deref","deref","deref","edge_merges","fmt","from","from","from","from","from","from_epsg_3857_to_4326","from_epsg_4326_to_3857","graph","initialize","initialize","initialize","initialize","into","into","into","into","into","main","max_diagonal_meters","min_duration_ms","node_merges","node_splits","outlier_node_removals","parser","redundant_node_removals","redundant_trj_removals","spatial_clusters","stream","time_guard","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utility","window","window_size","Centroid","ClusteringArgs","EdgeRepresentative","Medoid","Output","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cluster_strategy","default","default","edges_csv","from","from","from","graph_dot","graph_json","into","into","into","nodes_csv","parse_arguments","temporal_slack","threshold","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Config","bbox_max_meters","bbox_min_minutes","borrow","borrow_mut","clone","clone_into","connection_timeout","default","deserialize","epsilon_velocity","fmt","fmt","from","into","max_hausdorff_meters","minimum_velocity","motion_detector_timespan","parse_config","serialize","to_owned","to_string","try_from","try_into","type_id","visvalingam_threshold","window_size","DEG","RAD","RADIUS","from_epsg_3857_to_4326","from_epsg_4326_to_3857","edge_clustering","graph","graph_builder","graph_builder_v2","median_trajectory","node_clustering","path","path_builder","path_builder_stats","path_element","temporal_splitting","EdgeClusters","get_edge_group_clusters","get_edge_groups","replace_edges","set_edges_centroid_trjs","set_edges_mediod_trjs","DetourGraph","Graph","TimePairs","Writable","a","add_path","b","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","edge_trj_mut","edge_weights","edges_directed","eq","equivalent","from","from","get_graph","get_mut_graph","get_node_bbox","get_node_weight","get_root_index","graph","hash","into","into","ne","new","node_indices","remove_node","root_reachable","roots","set_edge_weight","set_graph","set_node_bbox","set_node_weight","to_csv","to_csv","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_constraints","verify_node","verify_temporal_monotonicity","Graph","get_graph","get_temporal_splits","merge_nodes","reassign_edges","split_bbox","MS_IN_24H","cluster_endpoints","get_graph_v2","spatiotemporal_distance","get_mediod_trj","get_minimal_bbox","get_spatial_clustering","resize_bboxs","spatially_cluster_nodes","Path","borrow","borrow_mut","clone","clone_into","expand_stops","fmt","fmt","from","get_trjs","into","is_empty","last_element","len","merge_nodes","new","next_trj_stop","path","push","remove_first","remove_last","rm_single_points","to_owned","to_string","try_from","try_into","type_id","verify","PathBuilder","add_pt","bbox","borrow","borrow_mut","build_path","building_initial_stop","finalize_path","from","get_path","get_paths","into","new","path","split_stream_on_timeout","trj","try_from","try_into","type_id","PathBuilderStats","borrow","borrow_mut","default","fmt","fmt","from","into","path_lens","streams_handled","timeouts","to_string","try_from","try_into","type_id","PathElement","Route","Stop","borrow","borrow_mut","clone","clone_into","copy_bbox","copy_trj","fmt","fmt","from","into","is_stop","to_owned","to_string","try_from","try_into","type_id","get_temporal_splits","make_temporally_monotone","reassign_edges","split_bbox","parse","parse_ais","parse_gpx","parse_plt","parse_synthetic","clean_stream","bounding_box","ch_filter","clustering","get_distance","line","motion_detector","stop_detector","time_guard","timeout_handler","trajectory","visvalingam","Bbox","area","borrow","borrow_mut","can_contain_trj","clone","clone_into","cmp","contains_point","deserialize","eq","equivalent","expand_along_trjs","fmt","fmt","from","insert_point","interval_overlap","into","is_before","is_in_spatial","is_in_temporal","is_single_point","longest_side","new","overlaps_spatially_by","partial_cmp","serialize","t1","t2","temporal_split","to_owned","to_string","try_from","try_into","type_id","union","verify_spatial","verify_temporal","x1","x2","y1","y2","CHFilter","borrow","borrow_mut","from","get_convex_hull_trj","get_spikes","into","into_iter","new","next","remove_spikes","stream","try_from","try_into","type_id","window","window_size","ClusterIdx","Clustering","MatrixIdx","borrow","borrow_mut","cluster_distance","clusters","distance_matrix","from","into","merge_clusters","new","partition","prep_distance_matrix","threshold","try_from","try_into","type_id","Line","advance","borrow","borrow_mut","end","from","intersection","into","length","start","try_from","try_into","type_id","MotionDetector","borrow","borrow_mut","eps","from","get_avg_velocity","into","is_stopped","min_velocity","new","ref_pt","spt_ivls","timespan","tmp_ivls","try_from","try_into","type_id","was_stopped","IsStopped","Maybe","No","StopDetector","Yes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","current_bbox","eq","equivalent","fmt","fmt","from","from","into","into","is_stopped","max_diagonal_meters","min_duration_ms","new","reset","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","TimeGuard","borrow","borrow_mut","clean_stream","from","into","is_ok","last_time","new","try_from","try_into","type_id","TimeoutHandler","borrow","borrow_mut","connection_timeout","from","into","is_alive","last_read","new","try_from","try_into","type_id","Interpolator","Monotone","Timespan","Trajectory","align_start_time","average","borrow","borrow_mut","common_timespan","from","from","get_point","idx","interpolate","into","is_monotone","make_monotone","mean_point","merge","morph_to_fit","trim_to_timespan","trj","try_from","try_into","type_id","visvalingam"],"q":["detour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::arguments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::config","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::coord","","","","","detour::graph","","","","","","","","","","","detour::graph::edge_clustering","","","","","","detour::graph::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::graph::graph_builder","","","","","","detour::graph::graph_builder_v2","","","","detour::graph::median_trajectory","detour::graph::node_clustering","","","","detour::graph::path","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::graph::path_builder","","","","","","","","","","","","","","","","","","","detour::graph::path_builder_stats","","","","","","","","","","","","","","","detour::graph::path_element","","","","","","","","","","","","","","","","","","","detour::graph::temporal_splitting","","","","detour::parser","","","","","detour::time_guard","detour::utility","","","","","","","","","","","detour::utility::bounding_box","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::ch_filter","","","","","","","","","","","","","","","","","detour::utility::clustering","","","","","","","","","","","","","","","","","","detour::utility::line","","","","","","","","","","","","","detour::utility::motion_detector","","","","","","","","","","","","","","","","","","detour::utility::stop_detector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::time_guard","","","","","","","","","","","","detour::utility::timeout_handler","","","","","","","","","","","","detour::utility::trajectory","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::visvalingam"],"d":["Applies the convex hull filter described by Adhinugraha …","","","","","","Detect if the object is stopped. If the movements of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a coordinate of EPSG 3857 …","Convert a coordinate of <code>[lat, lon, time]</code> in EPSG 4326 to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Various utilities","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximal length of any side of a <code>Bbox</code>. If movement occurs …","The least amount of time that movement must occur within …","","","","","Maximal number of milliseconds between two measurements …","","","If the object moves faster than <code>minimum_velocity</code> plus …","","","","","If two trajectories belonging to the same edge have a …","If the object moves slower than this it is considered to …","The timespan used by the <code>MotionDetector</code> to calculate …","Parses config.json in the root folder into a Config struct","","","","","","","Threshold for Visvalingam algorithm.","Number of points used in the CH-filter.","","","Constants for WSG 84 / Pseudo-Mercator (EPSG CRS Code …","Convert a coordinate of EPSG 3857 …","Convert a coordinate of <code>[lat, lon, time]</code> in EPSG 4326 to …","","","","","","","","","","","","","","","","Merges the edges using interpolation. I.e. the …","Cluster the edges using Hausdorff similarity and insert a …","","","","","","","","","","","","","","","","","Allows iteration over edge weights.","","","","","","","","","","Returns Some(index) of <code>nx</code> in the roots list or None","","","","","","","Allows iteration over nodes.","Removes node from the graph and the root list.","","","","","","","","Writes the graph to the output folder. Command line …","","","","","","","","","","Checks and returns a tuple with the following for the …","If any edge (a,b) breaks temporal monotonicity -> false.","","Constructs the graph Handles spatial node clustering, …","Determines where the cluster representative bbox should …","","","","","Returns an agglomerative clustering of the endpoints","Constructs the graph Handles spatio-temporal clustering …","Returns spatiotemporal distance The distance is a …","","Determines the minimal bbox s.t. endpoints of all …","Cluster nodes spatially Clustering criteria: If two nodes …","","Cluster nodes if they are spatially overlapping. Returns …","","","","","","Stops are expanded along the routes they are connected to.…","","","","","","","","","Tests if the trj between two consecutive bboxs can be …","","","","","","","Remove consecutive single point nodes If the granularity …","","","","","","","","All points are added to a trajectory. Initially, a stop …","","","","Classify stops and routes of a stream","","","","","Returns a vector of paths given a stream","","","","Splits the stream if more than <code>CONFIG.connection_timeout</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns list of timestamps where the trajectories should …","","","","Determines if content type and parses accordingly. …","Parses a string containing AIS data.","Parses a string containing GPX data.","Parses a string containing PLT data.","Parses synthetic data from […","Filters away points in the stream that lie temporally …","","","","Returns Euclidean distance in meters","","","","","","","","","Spatial area in m²","","","","","","","","","","","Expands the bbox along the trajectories. TODO: When …","","","","Inserts <code>point</code> and expands <code>Bbox</code> if neccesary.","Determine overlap of intervals","","Determine if other ‘Bbox’ is temporally before ‘self…","","","","Returns the squared diameter of the bbox.","","","","","","","Splits Bbox temporally at <code>t</code>.","","","","","","","Verifies if bbox satisfies the spatial constraints given …","Verifies if bbox satisfies the temporal constraints given …","","","","","Applies the convex hull filter described by Adhinugraha …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Agglomerative clustering The cluster distance is …","","We don’t want to merge clusters with themselves, so we …","","","","","","","","","","","","","","","","","","","","","If (min_velocity + eps > average velocity) then it is …","","calculate average velocity of points in tmp_ivls and …","","Returns true if the object is stopped.","Minimum velocity in km/h","","Reference point for calculating intervals","Spatial intervals (in meters) in timespan","Milliseconds of measurements to consider","Temporal intervals in timespan","","","","Was the last point a ‘stop’","","","","Detect if the object is stopped. If the movements of the …","","","","","","","","","","","","","","","","","","","","","Clear the bbox used for detection.","","","","","","","","","","","Filters away points in the stream that lie temporally …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,0,1,2,3,5,4,1,2,3,5,4,5,5,0,0,6,5,1,2,3,4,5,5,1,2,3,5,4,0,0,0,1,2,3,4,1,2,3,5,4,0,6,6,5,5,5,0,5,5,5,7,0,5,1,2,3,5,4,1,2,3,5,4,1,2,3,5,4,0,7,7,8,0,0,8,0,9,8,10,9,8,10,10,9,10,9,9,8,10,9,9,9,8,10,9,0,10,10,9,8,10,9,8,10,9,8,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,12,12,13,12,13,12,13,12,13,13,13,13,12,12,12,13,13,13,13,13,13,13,12,12,13,12,13,13,13,13,13,13,13,13,13,14,13,12,13,12,13,12,13,12,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,0,16,16,16,16,0,16,16,16,0,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,7,7,7,0,0,7,7,7,7,0,7,7,7,7,7,7,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,0,23,6,23,6,23,23,23,6,23,23,6,23,6,23,6,23,6,6,6,6,6,23,6,23,6,23,6,23,0,24,24,0,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,0,0,26,26,27,26,26,26,26,0,26,28,28,0,0,0,27,26,26,26,26,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["statistics",3]],[[]],null,null,null,[[],["statistics",3]],[[],["config",3]],[[],["mutex",3]],[[],["mutex",3]],[[],["mutex",3]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],null,[[]],[[]],[[]],null,null,[[]],[[]],[[]],null,[[],["config",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["config",3]],[[]],null,[[]],[[],["result",4]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,null,[[["string",3]],["config",3]],[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["stabledigraph",6]],[["vec",3,["edgeindex"]],["vec",3,["vec"]]]],[[["stabledigraph",6]],[["hashmap",3,["vec"]],["vec",3,["edgeindex"]]]],[[["stabledigraph",6],["nodeindex",3]]],[[["stabledigraph",6]]],[[["stabledigraph",6]]],null,null,null,null,null,[[["path",3]]],null,[[]],[[]],[[]],[[]],[[],["timepairs",3]],[[],["detourgraph",3]],[[]],[[]],[[["edgeindex",3]],["vec",3]],[[],["vec",3]],[[["edgedirection",4],["nodeindex",3]],[["vec",3,["edgeindex"]],["edgeindex",3]]],[[["timepairs",3]],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["stabledigraph",6]],[[],["stabledigraph",6]],[[["nodeindex",3]],["bbox",3]],[[["nodeindex",3]],["u32",15]],[[["nodeindex",3]],[["usize",15],["option",4,["usize"]]]],null,[[]],[[]],[[]],[[["timepairs",3]],["bool",15]],[[],["detourgraph",3]],[[],["nodeindices",3]],[[["nodeindex",3]]],[[["nodeindex",3]],["bool",15]],null,[[["u32",15],["edgeindex",3]]],[[["vec",3,["nodeindex"]],["nodeindex",3],["stabledigraph",6]]],[[["bbox",3],["nodeindex",3]]],[[["u32",15],["nodeindex",3]]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[["nodeindex",3]]],[[],["bool",15]],null,[[["vec",3,["vec"]],["vec",3]],["detourgraph",3]],[[["vec",3]],[["vec",3,["f64"]],["f64",15]]],[[["detourgraph",3]]],[[["stabledigraph",6],["nodeindex",3],["edgedirection",4]]],[[["bbox",3]],[["bbox",3],["vec",3,["bbox"]]]],null,[[],[["hashset",3,["usize"]],["vec",3,["hashset"]]]],[[["vec",3,["vec"]],["vec",3]],["stabledigraph",6]],[[["f64",15]],["f64",15]],[[["stabledigraph",6]],["edgeindex",3]],[[["detourgraph",3]],["bbox",3]],[[["detourgraph",3]],[["vec",3,["vec"]],["vec",3,["nodeindex"]]]],[[["bbox",3],["detourgraph",3]]],[[["detourgraph",3]],[["vec",3,["vec"]],["vec",3,["nodeindex"]]]],null,[[]],[[]],[[],["path",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],[["vec",3,["vec"]],["vec",3]]],[[]],[[],["bool",15]],[[],[["pathelement",4],["option",4,["pathelement"]]]],[[],["usize",15]],[[]],[[]],[[],["option",4]],null,[[["pathelement",4]]],[[],["pathelement",4]],[[],["pathelement",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],null,[[["isstopped",4]]],null,[[]],[[]],[[["vec",3]],["path",3]],null,[[]],[[]],[[],["path",3]],[[["pathbuilderstats",3],["vec",3]],[["vec",3,["path"]],["path",3]]],[[]],[[],["pathbuilder",3]],null,[[["pathbuilderstats",3]],[["vec",3,["vec"]],["vec",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["pathbuilderstats",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["pathelement",4]],[[]],[[],[["bbox",3],["option",4,["bbox"]]]],[[],[["option",4,["vec"]],["vec",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["vec",3,["vec"]],["vec",3]],[["vec",3,["f64"]],["f64",15]]],[[["stabledigraph",6]]],[[["stabledigraph",6],["nodeindex",3],["edgedirection",4]]],[[["bbox",3]],[["bbox",3],["vec",3,["bbox"]]]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["string",3]],[["vec",3,["vec"]],["vec",3]]],[[["vec",3]],["vec",3]],null,null,null,[[],["f64",15]],null,null,null,null,null,null,null,null,[[],["f64",15]],[[]],[[]],[[],["bool",15]],[[],["bbox",3]],[[]],[[],["ordering",4]],[[],["bool",15]],[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[["f64",15],["option",4,["f64"]],["vec",3,["vec"]],["vec",3]],["bbox",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["f64",15]],["f64",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["f64",15]],[[],["bbox",3]],[[],["bool",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],null,null,[[["f64",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[]],[[]],[[]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[]],[[]],[[["usize",15]],["chfilter",3]],[[],["option",4]],[[["vec",3]],["vec",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[["usize",15]],["f64",15]],null,null,[[]],[[]],[[["usize",15]]],[[["f64",15],["vec",3,["vec"]],["vec",3,["f64"]]]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[]],[[["line",3]],["option",4]],[[]],[[],["f64",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[],["f64",15]],[[]],[[],["isstopped",4]],null,[[],["motiondetector",3]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["isstopped",4]],[[]],null,[[["isstopped",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["isstopped",4]],null,null,[[],["stopdetector",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["vec",3]],["vec",3]],[[]],[[]],[[],["bool",15]],null,[[],["timeguard",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[],["bool",15]],null,[[["f64",15]],["timeouthandler",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[["f64",15]]],null,[[["f64",15]]],[[]],[[],["bool",15]],[[]],[[]],[[],["vec",3]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["f64",15]],["vec",3]]],"p":[[3,"CONFIG"],[3,"OUTPUT"],[3,"CLUSTERINGARGS"],[3,"STATS"],[3,"Statistics"],[3,"StopDetector"],[3,"CHFilter"],[4,"EdgeRepresentative"],[3,"Output"],[3,"ClusteringArgs"],[3,"Config"],[3,"TimePairs"],[3,"DetourGraph"],[8,"Writable"],[3,"Path"],[3,"PathBuilder"],[3,"PathBuilderStats"],[4,"PathElement"],[3,"Bbox"],[3,"Clustering"],[3,"Line"],[3,"MotionDetector"],[4,"IsStopped"],[3,"TimeGuard"],[3,"TimeoutHandler"],[3,"Interpolator"],[8,"Timespan"],[8,"Monotone"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};