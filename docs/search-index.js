var searchIndex = JSON.parse('{\
"detour":{"doc":"Constructs Detour Graph","t":[3,3,3,8,3,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,0,12,11,12,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,0,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,0,3,13,13,13,4,13,3,12,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,6,3,3,4,8,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,12,3,3,3,13,13,3,4,3,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,17,17,17,17,17,17,17,17,12,12,12,12,12,12,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,5,11,11,11,11,12,5,5,5,5,11,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,3,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,12,12,5,5,12,12,12,12,11,11,11,11,11,11,11,12,5,0,0,0,5,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,12,12,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,5,5,11,11,11,11,5,12,11,11,11,12,12,6,3,6,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,3,11,11,11,12,11,11,11,11,12,11,11,11,3,11,11,12,11,11,11,11,12,11,12,12,12,12,11,11,11,3,11,11,12,12,11,11,11,11,11,12,11,11,11,3,11,11,5,11,11,11,12,11,11,11,11,3,11,11,12,11,11,11,12,11,11,11,11,3,8,5,5,5,11,11,11,11,5,5,11,12,11,11,10,10,5,5,5,5,12,11,11,11],"n":["BufReader","CHFilter","Path","Read","StopDetector","ancestors","as_os_str","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","buf","buffer","by_ref","bytes","canonicalize","cap","capacity","chain","clone_into","cmp","components","consume","data_structures","diagonal_meters","display","duration_ms","ends_with","env","env","eq","eq","eq","eq","eq","eq","eq","equivalent","exists","extension","file_name","file_prefix","file_stem","fill_buf","fmt","fmt","from","fs","get_mut","get_ref","has_root","hash","initializer","initializer","inner","inner","into","into_inner","into_path_buf","is_absolute","is_dir","is_file","is_read_vectored","is_read_vectored","is_relative","is_symlink","iter","join","main","metadata","new","new","parent","parser","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","points","pos","read","read","read_dir","read_exact","read_exact","read_link","read_to_end","read_to_end","read_to_string","read_to_string","read_vectored","read_vectored","seek","seek_relative","starts_with","stream","stream_position","strip_prefix","symlink_metadata","take","time_guard","to_owned","to_path_buf","to_str","to_string_lossy","try_exists","try_from","try_into","type_id","type_id","utility","window","window_size","with_capacity","with_extension","with_file_name","graph","DetourGraph","DifferentRoot","DoubleRoot","NonRoots","RootCase","SameRoot","TimePairs","a","add_endpoints","add_path","b","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","copy_edges","eq","equivalent","find_match","find_matching_nodes","from","from","from","get_dominant_roots","get_edge_group_clusters","get_edge_groups","get_root_case","get_root_index","get_temporal_splits","get_temporal_splits_old","graph","graph_builder","hash","into","into","into","make_acyclic","merge_edges","merge_nodes","ne","new","pathbuilder","reassign_edges","replace_edges","roots","should_split","split_bbox","split_node","to_csv","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_constraints","verify_node","0","0","0","get_graph","Path","PathBuilder","PathBuilderError","PathElement","PathTrait","PointsForElement","Route","Route","Stop","Stop","add_point","add_pt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_path","clone","clone","clone","clone_into","clone_into","clone_into","cut_route","expand_stops","finalize_path","fmt","fmt","fmt","fmt","from","from","from","from","get_bbox","get_path","get_paths","get_points","get_trj","into","into","into","into","is_stop","is_stop","new","path","path_element","split_stream_on_timeout","stop_from","to_owned","to_owned","to_owned","to_path_element","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","0","0","0","0","Args","ArgsOs","JoinPathsError","NotPresent","NotUnicode","SplitPaths","VarError","Vars","VarsOs","args","args_os","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","consts","current_dir","current_exe","description","description","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","home_dir","inner","inner","inner","inner","inner","inner","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","join_paths","len","len","ne","next","next","next","next","next","next_back","next_back","remove_var","set_current_dir","set_var","size_hint","size_hint","size_hint","size_hint","size_hint","split_paths","temp_dir","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","var","var_os","vars","vars_os","0","ARCH","DLL_EXTENSION","DLL_PREFIX","DLL_SUFFIX","EXE_EXTENSION","EXE_SUFFIX","FAMILY","OS","0","0","0","0","0","0","DirBuilder","DirEntry","File","FileType","Metadata","OpenOptions","Permissions","ReadDir","accessed","append","as_fd","as_raw_fd","as_raw_stat","atime","atime_nsec","blksize","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","copy","create","create","create","create_dir","create_dir_all","create_new","created","ctime","ctime_nsec","custom_flags","dev","eq","eq","equivalent","equivalent","file_name","file_name_ref","file_type","file_type","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_mode","from_raw_fd","gid","hard_link","hash","initializer","inner","inner","ino","ino","into","into","into","into","into","into","into","into","into_iter","into_raw_fd","is_block_device","is_char_device","is_dir","is_dir","is_fifo","is_file","is_file","is_read_vectored","is_socket","is_symlink","is_symlink","is_write_vectored","len","metadata","metadata","metadata","mode","mode","mode","mode","modified","mtime","mtime_nsec","ne","ne","new","new","next","nlink","open","open","path","permissions","rdev","read","read","read","read_at","read_dir","read_link","read_to_end","read_to_string","read_to_string","read_vectored","readonly","recursive","recursive","remove_dir","remove_dir_all","remove_file","rename","seek","set_len","set_mode","set_permissions","set_permissions","set_readonly","size","soft_link","st_atime","st_atime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_gid","st_ino","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_rdev","st_size","st_uid","symlink_metadata","sync_all","sync_data","to_owned","to_owned","to_owned","to_owned","truncate","try_clone","try_exists","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","with_options","write","write","write","write_at","write_vectored","Config","ConfigKeys","ConnectionTimeout","EpsilonVelocity","MaxHausdorffMeters","MinimumVelocity","RelaxBboxMeters","RelaxBboxMinutes","StopDiagonalMeters","StopDurationMinutes","WindowSize","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","connection_timeout","default","epsilon_velocity","fmt","from","from","from_str","into","into","max_hausdorff_meters","minimum_velocity","parse_config","parse_gpx","relax_bbox_meters","relax_bbox_minutes","stop_diagonal_meters","stop_duration_minutes","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","window_size","clean_stream","bounding_box","ch_filter","clustering","get_distance","line","motion_detector","stop_detector","time_guard","timeout_handler","trajectory","Bbox","add_point","borrow","borrow_mut","center","clone","clone_into","cmp","contains_point","eq","equivalent","expand","expand_bbox","fmt","fmt","from","get_bounding_lines","get_diameter","get_longitude_degree_length","has_temporal_overlap","into","is_before","is_in_spatial","merge","meters_to_degrees","new","overlaps","partial_cmp","t1","t2","temporal_split","to_owned","to_string","try_from","try_into","type_id","union","x1","x2","y1","y2","CHFilter","borrow","borrow_mut","from","get_convex_hull_trj","get_spikes","into","into_iter","new","next","remove_spikes","stream","try_from","try_into","type_id","window","window_size","ClusterIdx","Clustering","MatrixIdx","add_to_cluster","borrow","borrow_mut","clusters","distance_matrix","from","get_cluster_idx","into","merge_clusters","new","partition","threshold","try_from","try_into","type_id","Line","advance","borrow","borrow_mut","end","from","intersection","into","length","start","try_from","try_into","type_id","MotionDetector","borrow","borrow_mut","eps","from","get_avg_velocity","into","is_moving","min_velocity","new","ref_pt","spt_ivls","timespan","tmp_ivls","try_from","try_into","type_id","StopDetector","borrow","borrow_mut","diagonal_meters","duration_ms","fit_to_timespan","from","into","is_stopped","new","points","try_from","try_into","type_id","TimeGuard","borrow","borrow_mut","clean_stream","from","into","is_ok","last_time","new","try_from","try_into","type_id","TimeoutHandler","borrow","borrow_mut","connection_timeout","from","into","is_alive","last_read","new","try_from","try_into","type_id","Interpolator","Monotone","align_start_time","align_time_to_zero","average","borrow","borrow_mut","from","from","get_common_time_span","get_min","get_point","idx","interpolate","into","is_monotone","make_monotone","mean_point","merge","morph_to_fit","trim","trj","try_from","try_into","type_id"],"q":["detour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::data_structures","detour::data_structures::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::data_structures::graph::RootCase","","","detour::data_structures::graph::graph_builder","detour::data_structures::graph::pathbuilder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::data_structures::graph::pathbuilder::PathElement","","detour::data_structures::graph::pathbuilder::PointsForElement","","detour::env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::env::VarError","detour::env::consts","","","","","","","","detour::fsdetour::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::time_guard","detour::utility","","","","","","","","","","detour::utility::bounding_box","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","detour::utility::ch_filter","","","","","","","","","","","","","","","","","detour::utility::clustering","","","","","","","","","","","","","","","","","","detour::utility::line","","","","","","","","","","","","","detour::utility::motion_detector","","","","","","","","","","","","","","","","","detour::utility::stop_detector","","","","","","","","","","","","","","detour::utility::time_guard","","","","","","","","","","","","detour::utility::timeout_handler","","","","","","","","","","","","detour::utility::trajectory","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.","Applies the convex hull filter described by Adhinugraha et …","A slice of a path (akin to <code>str</code>).","The <code>Read</code> trait allows for reading bytes from a source.","Detect if the object is stopped. If the movements of the …","Produces an iterator over <code>Path</code> and its ancestors.","Yields the underlying <code>OsStr</code> slice.","","","","","","","","Returns a reference to the internally buffered data.","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Returns the canonical, absolute form of the path with all …","","Returns the number of bytes the internal buffer can hold …","Creates an adapter which will chain this stream with …","","","Produces an iterator over the <code>Component</code>s of the path.","","","","Returns an object that implements <code>Display</code> for safely …","","Determines whether <code>child</code> is a suffix of <code>self</code>.","Inspection and manipulation of the process’s environment.","Inspects an environment variable at compile time.","","","","","","","","","Returns <code>true</code> if the path points at an existing entity.","Extracts the extension of <code>self.file_name</code>, if possible.","Returns the final component of the <code>Path</code>, if there is one.","Extracts the prefix of <code>self.file_name</code>.","Extracts the stem (non-extension) portion of <code>self.file_name</code>…","","","","","Filesystem manipulation operations.","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Returns <code>true</code> if the <code>Path</code> has a root.","","","Determines if this <code>Read</code>er can work with buffers of …","","","","Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.","Converts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …","Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …","Returns <code>true</code> if the path exists on disk and is pointing at …","Returns <code>true</code> if the path exists on disk and is pointing at …","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.","Returns <code>true</code> if the path exists on disk and is pointing at …","Produces an iterator over the path’s components viewed …","Creates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.","","Queries the file system to get information about a file, …","Creates a new <code>BufReader&lt;R&gt;</code> with a default buffer capacity. …","Directly wraps a string slice as a <code>Path</code> slice.","Returns the <code>Path</code> without its final component, if there is …","","","","","","","","","","","Pull some bytes from this source into the specified …","","Returns an iterator over the entries within a directory.","","Read the exact number of bytes required to fill <code>buf</code>.","Reads a symbolic link, returning the file that the link …","","Read all bytes until EOF in this source, placing them into …","","Read all bytes until EOF in this source, appending them to …","","Like <code>read</code>, except that it reads into a slice of buffers.","Seek to an offset, in bytes, in the underlying reader.","Seeks relative to the current position. If the new …","Determines whether <code>base</code> is a prefix of <code>self</code>.","","Returns the current seek position from the start of the …","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.","Queries the metadata about a file without following …","Creates an adapter which will read at most <code>limit</code> bytes …","","","Converts a <code>Path</code> to an owned <code>PathBuf</code>.","Yields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.","Converts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.","Returns <code>Ok(true)</code> if the path points at an existing entity.","","","","","Various utilities","","","Creates a new <code>BufReader&lt;R&gt;</code> with the specified buffer …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given file …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a detour graph when given a vector of preprocessed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector of paths given a stream","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the arguments of a process, yielding a …","An iterator over the arguments of a process, yielding an …","The error type for operations on the <code>PATH</code> variable. …","The specified environment variable was not present in the …","The specified environment variable was found, but it did …","An iterator that splits an environment variable into paths …","The error type for operations interacting with environment …","An iterator over a snapshot of the environment variables …","An iterator over a snapshot of the environment variables …","Returns the arguments that this program was started with …","Returns the arguments that this program was started with …","","","","","","","","","","","","","","","","","Constants associated with the current target","Returns the current working directory as a <code>PathBuf</code>.","Returns the full filesystem path of the current running …","","","","","","","","","","","","","","","","","","","","","Returns the path of the current user’s home directory if …","","","","","","","","","","","","","","","","","","","","","Joins a collection of <code>Path</code>s appropriately for the <code>PATH</code> …","","","","","","","","","","","Removes an environment variable from the environment of …","Changes the current working directory to the specified …","Sets the environment variable <code>key</code> to the value <code>value</code> for …","","","","","","Parses input according to platform conventions for the <code>PATH</code>","Returns the path of a temporary directory.","","","","","","","","","","","","","","","","","","","","","","","","","Fetches the environment variable <code>key</code> from the current …","Fetches the environment variable <code>key</code> from the current …","Returns an iterator of (variable, value) pairs of strings, …","Returns an iterator of (variable, value) pairs of OS …","","A string describing the architecture of the CPU that is …","Specifies the file extension used for shared libraries on …","Specifies the filename prefix used for shared libraries on …","Specifies the filename suffix used for shared libraries on …","Specifies the file extension, if any, used for executable …","Specifies the filename suffix used for executable binaries …","The family of the operating system. Example value is <code>unix</code>.","A string describing the specific operating system in use. …","","","","","","","A builder used to create directories in various manners.","Entries returned by the <code>ReadDir</code> iterator.","A reference to an open file on the filesystem.","A structure representing a type of file with accessors for …","Metadata information about a file.","Options and flags which can be used to configure how a …","Representation of the various permissions on a file.","Iterator over the entries in a directory.","Returns the last access time of this metadata.","Sets the option for the append mode.","","","","","","","","","","","","","","","","","","","","","","","","Returns the canonical, absolute form of a path with all …","","","","","","","","","Copies the contents of one file to another. This function …","Opens a file in write-only mode.","Sets the option to create a new file, or open it if it …","Creates the specified directory with the options …","Creates a new, empty directory at the provided path","Recursively create a directory and all of its parent …","Sets the option to create a new file, failing if it …","Returns the creation time listed in this metadata.","","","","","","","","","Returns the bare file name of this directory entry without …","","Returns the file type for the file that this entry points …","Returns the file type for this metadata.","","","","","","","","","","","","","","","","","","","","","","Creates a new hard link on the filesystem.","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if this metadata is for a directory. The …","Tests whether this file type represents a directory. The …","","Returns <code>true</code> if this metadata is for a regular file. The …","Tests whether this file type represents a regular file. …","","","Returns <code>true</code> if this metadata is for a symbolic link.","Tests whether this file type represents a symbolic link. …","","Returns the size of the file, in bytes, this metadata is …","Given a path, query the file system to get information …","Queries metadata about the underlying file.","Returns the metadata for the file that this entry points …","","","","","Returns the last modification time listed in this metadata.","","","","","Creates a blank new set of options ready for configuration.","Creates a new set of options with default mode/security …","","","Attempts to open a file in read-only mode.","Opens a file at <code>path</code> with the options specified by <code>self</code>.","Returns the full path to the file that this entry …","Returns the permissions of the file this metadata is for.","","Read the entire contents of a file into a bytes vector.","","Sets the option for read access.","","Returns an iterator over the entries within a directory.","Reads a symbolic link, returning the file that the link …","","Read the entire contents of a file into a string.","","","Returns <code>true</code> if these permissions describe a readonly …","Indicates that directories should be created recursively, …","","Removes an empty directory.","Removes a directory at this path, after removing all its …","Removes a file from the filesystem.","Rename a file or directory to a new name, replacing the …","","Truncates or extends the underlying file, updating the …","","Changes the permissions found on a file or a directory.","Changes the permissions on the underlying file.","Modifies the readonly flag for this set of permissions. If …","","Creates a new symbolic link on the filesystem.","","","","","","","","","","","","","","","","","Query the metadata about a file without following symlinks.","Attempts to sync all OS-internal metadata to disk.","This function is similar to <code>sync_all</code>, except that it might …","","","","","Sets the option for truncating a previous file.","Creates a new <code>File</code> instance that shares the same …","Returns <code>Ok(true)</code> if the path points at an existing entity.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new OpenOptions object.","Write a slice as the entire contents of a file.","","Sets the option for write access.","","","The fields can be set using the config file.","","","","","","","","","","","","","","","","","Maximal number of milliseconds between two measurements …","","If the object moves faster than <code>minimum_velocity</code> plus this …","","","","","","","If two trajectories belonging to the same edge have a …","If the object moves slower than this it is considered to …","Parses config.cfg in the root folder into a Config struct","Parses a string containing GPX data.","When searching for matching stops allow them to be this …","When searching for matching stops allow them to be this …","Maximal diagonal size of a geofenced region. If movement …","The least amount of time that movement must occur within a …","","","","","","","","Number of points used in the CH-filter","Filters away points in the stream that lie temporally …","","","","Returns haversine distance in meters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the convex hull filter described by Adhinugraha et …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Detect if the object is stopped. If the movements of the …","","","","","","","","","","","","","","","","","Filters away points in the stream that lie temporally …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,2,1,2,1,2,2,3,3,1,2,2,3,1,1,1,2,0,4,1,4,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,0,2,2,1,1,2,3,2,1,2,2,1,1,1,1,2,3,1,1,1,1,0,1,2,1,1,0,1,1,1,1,1,1,1,4,2,3,2,1,2,3,1,2,3,2,3,2,3,2,2,1,5,2,1,1,3,0,1,1,1,1,1,2,2,2,1,0,5,5,2,1,1,0,0,6,6,6,0,6,0,7,8,8,7,6,7,8,6,7,8,7,8,7,8,8,8,7,7,8,8,6,7,8,8,8,8,8,8,8,8,8,0,7,6,7,8,8,8,8,7,8,0,8,8,8,8,8,8,8,7,8,6,7,8,6,7,8,6,7,8,8,8,9,10,11,0,0,0,0,0,0,0,12,13,12,13,13,14,14,12,13,15,14,12,13,15,0,12,13,15,12,13,15,14,14,14,12,13,15,15,14,12,13,15,12,14,0,13,12,14,12,13,15,12,13,14,14,14,0,12,12,13,15,13,15,14,12,13,15,14,12,13,15,14,12,13,15,16,17,18,19,20,0,0,0,21,21,0,0,0,0,0,0,22,23,24,25,26,21,27,22,23,24,25,26,21,27,21,21,0,0,0,21,27,21,21,22,23,24,25,26,21,21,27,27,22,23,24,25,26,21,27,0,22,23,24,25,26,27,22,23,24,25,26,21,27,22,23,24,25,26,25,26,0,25,26,21,22,23,24,25,26,25,26,0,0,0,22,23,24,25,26,0,0,21,21,27,22,23,24,25,26,21,27,22,23,24,25,26,21,27,22,23,24,25,26,21,27,0,0,0,0,28,0,0,0,0,0,0,0,0,29,30,31,32,33,34,0,0,0,0,0,0,0,0,30,32,35,35,30,30,30,30,30,35,29,30,31,32,33,34,36,35,29,30,31,32,33,34,36,0,30,32,33,34,30,32,33,34,0,35,32,36,0,0,32,30,30,30,32,30,33,34,33,34,29,29,29,30,35,35,29,30,31,32,33,34,36,35,35,29,30,31,32,33,34,36,33,35,30,0,34,35,35,36,29,30,35,29,30,31,32,33,34,36,31,35,34,34,30,34,34,30,34,35,34,30,34,35,30,0,35,29,30,32,33,36,30,30,30,33,34,32,36,31,30,35,32,29,30,30,0,35,32,35,0,0,35,0,35,35,33,36,36,0,0,0,0,35,35,33,0,35,33,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,35,35,30,32,33,34,32,35,0,35,29,30,31,32,33,34,36,35,29,30,31,32,33,34,36,35,29,30,31,32,33,34,36,30,35,0,35,32,35,35,0,0,37,37,37,37,37,37,37,37,37,37,38,37,38,38,38,38,38,38,38,37,38,37,37,38,38,38,0,0,38,38,38,38,38,37,38,37,38,37,38,38,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,39,39,39,39,39,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,5,5,5,0,0,5,5,5,5,0,5,5,5,5,5,5,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,43,43,0,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,45,45,45,45,0,0,45,45,45,45,46,46,0,0,0,0,45,45,45,45],"f":[null,null,null,null,null,[[],["ancestors",3]],[[],["osstr",3]],[[],["path",3]],[[],["osstr",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["bytes",3]],[[],["result",4,[["pathbuf",3],["error",3]]]],null,[[],["usize",15]],[[],["chain",3]],[[["pathbuf",3]]],[[["path",3]],["ordering",4]],[[],["components",3]],[[["usize",15]]],null,null,[[],["display",3]],null,[[],["bool",15]],null,null,[[["pathbuf",3]],["bool",15]],[[["osstring",3]],["bool",15]],[[["cow",4]],["bool",15]],[[["path",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[["cow",4]],["bool",15]],[[["osstr",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4,[["osstr",3]]]],[[],["option",4,[["osstr",3]]]],[[],["option",4,[["osstr",3]]]],[[],["option",4,[["osstr",3]]]],[[],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],null,[[]],[[]],[[],["bool",15]],[[]],[[],["initializer",3]],[[],["initializer",3]],null,null,[[]],[[]],[[["box",3,[["path",3],["global",3]]]],["pathbuf",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["pathbuf",3]],[[]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["bufreader",3]],[[],["path",3]],[[],["option",4,[["path",3]]]],null,[[["pathbuf",3]],["option",4,[["ordering",4]]]],[[["osstring",3]],["option",4,[["ordering",4]]]],[[["cow",4]],["option",4,[["ordering",4]]]],[[["osstr",3]],["option",4,[["ordering",4]]]],[[["osstr",3]],["option",4,[["ordering",4]]]],[[["cow",4]],["option",4,[["ordering",4]]]],[[["path",3]],["option",4,[["ordering",4]]]],null,null,[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["readdir",3],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[["vec",3]],["result",4,[["usize",15],["error",3]]]],[[["vec",3]],["result",4,[["usize",15],["error",3]]]],[[["string",3]],["result",4,[["usize",15],["error",3]]]],[[["string",3]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[["seekfrom",4]],["result",4,[["u64",15],["error",3]]]],[[["i64",15]],["result",4,[["error",3]]]],[[],["bool",15]],null,[[],["result",4,[["u64",15],["error",3]]]],[[],["result",4,[["path",3],["stripprefixerror",3]]]],[[],["result",4,[["metadata",3],["error",3]]]],[[["u64",15]],["take",3]],null,[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["option",4,[["str",15]]]],[[],["cow",4,[["str",15]]]],[[],["result",4,[["bool",15],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["usize",15]],["bufreader",3]],[[],["pathbuf",3]],[[],["pathbuf",3]],null,null,null,null,null,null,null,null,null,[[],["vec",3,[["vec",3]]]],[[["vec",3,[["pathelement",4]]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["timepairs",3]],[[],["detourgraph",3]],[[]],[[]],null,[[["nodeindex",3],["nodeindex",3]]],[[["timepairs",3]],["bool",15]],[[],["bool",15]],[[["nodeindex",3]],["option",4,[["nodeindex",3]]]],[[],["option",4]],[[]],[[]],[[]],[[["nodeindex",3]],["vec",3,[["usize",15]]]],[[],["vec",3,[["vec",3,[["edgeindex",3]]]]]],[[],["hashmap",3,[["vec",3,[["edgeindex",3]]]]]],[[["nodeindex",3],["nodeindex",3]],["rootcase",4]],[[["nodeindex",3]],["option",4,[["usize",15]]]],[[["nodeindex",3]],["vec",3,[["f64",15]]]],[[["nodeindex",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["timepairs",3]],["bool",15]],[[["config",3]],["detourgraph",3]],null,[[["nodeindex",3],["edgedirection",4]]],[[["nodeindex",3],["nodeindex",3],["vec",3]]],null,[[["nodeindex",3]],["bool",15]],[[["bbox",3]],["vec",3,[["bbox",3]]]],[[["nodeindex",3]]],[[],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[["nodeindex",3]]],null,null,null,[[["vec",3,[["vec",3]]],["config",3]],["detourgraph",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["config",3]],["vec",3,[["pathelement",4]]]],[[],["pathelement",4]],[[],["pointsforelement",4]],[[],["pathbuildererror",3]],[[]],[[]],[[]],[[["usize",15]]],[[["f64",15],["f64",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4,[["bbox",3]]]],[[],["vec",3,[["pathelement",4]]]],[[["vec",3],["config",3]],["vec",3,[["vec",3,[["pathelement",4]]]]]],[[],["vec",3]],[[],["option",4,[["vec",3]]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["pathbuilder",3]],null,null,[[["f64",15]],["vec",3,[["vec",3]]]],[[],["pathelement",4]],[[]],[[]],[[]],[[],["pathelement",4]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["args",3]],[[],["argsos",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["varerror",4]],[[]],null,[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["str",15]],[[],["str",15]],[[["varerror",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["pathbuf",3]]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["result",4,[["osstring",3],["joinpathserror",3]]]],[[],["usize",15]],[[],["usize",15]],[[["varerror",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4,[["pathbuf",3]]]],[[],["option",4,[["string",3]]]],[[],["option",4,[["osstring",3]]]],[[],["option",4,[["string",3]]]],[[],["option",4,[["osstring",3]]]],[[]],[[],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["splitpaths",3]],[[],["pathbuf",3]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["string",3],["varerror",4]]]],[[],["option",4,[["osstring",3]]]],[[],["vars",3]],[[],["varsos",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["systemtime",3],["error",3]]]],[[["bool",15]],["openoptions",3]],[[],["borrowedfd",3]],[[],["i32",15]],[[],["stat",3]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["metadata",3]],[[],["openoptions",3]],[[],["permissions",3]],[[],["filetype",3]],[[]],[[]],[[]],[[]],[[],["result",4,[["u64",15],["error",3]]]],[[],["result",4,[["file",3],["error",3]]]],[[["bool",15]],["openoptions",3]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["bool",15]],["openoptions",3]],[[],["result",4,[["systemtime",3],["error",3]]]],[[],["i64",15]],[[],["i64",15]],[[["i32",15]],["openoptions",3]],[[],["u64",15]],[[["permissions",3]],["bool",15]],[[["filetype",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["osstring",3]],[[],["osstr",3]],[[],["result",4,[["filetype",3],["error",3]]]],[[],["filetype",3]],[[],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[["ownedfd",3]],["file",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["permissions",3]],[[["i32",15]],["file",3]],[[],["u32",15]],[[],["result",4,[["error",3]]]],[[]],[[],["initializer",3]],null,null,[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u64",15]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["u32",15]],[[["u32",15]],["openoptions",3]],[[],["u32",15]],[[["u32",15]],["dirbuilder",3]],[[],["result",4,[["systemtime",3],["error",3]]]],[[],["i64",15]],[[],["i64",15]],[[["permissions",3]],["bool",15]],[[["filetype",3]],["bool",15]],[[],["openoptions",3]],[[],["dirbuilder",3]],[[],["option",4,[["result",4,[["direntry",3],["error",3]]]]]],[[],["u64",15]],[[],["result",4,[["file",3],["error",3]]]],[[],["result",4,[["file",3],["error",3]]]],[[],["pathbuf",3]],[[],["permissions",3]],[[],["u64",15]],[[],["result",4,[["vec",3,[["u8",15],["global",3]]],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[["bool",15]],["openoptions",3]],[[["u64",15]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["readdir",3],["error",3]]]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[["vec",3]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["string",3],["error",3]]]],[[["string",3]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["bool",15]],[[["bool",15]],["dirbuilder",3]],null,[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["seekfrom",4]],["result",4,[["u64",15],["error",3]]]],[[["u64",15]],["result",4,[["error",3]]]],[[["u32",15]]],[[["permissions",3]],["result",4,[["error",3]]]],[[["permissions",3]],["result",4,[["error",3]]]],[[["bool",15]]],[[],["u64",15]],[[],["result",4,[["error",3]]]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u64",15]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u32",15]],[[],["u64",15]],[[],["u32",15]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u32",15]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["bool",15]],["openoptions",3]],[[],["result",4,[["file",3],["error",3]]]],[[],["result",4,[["bool",15],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[],["openoptions",3]],[[],["result",4,[["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[["bool",15]],["openoptions",3]],[[["u64",15]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["config",3]],[[]],null,[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],["result",4,[["configkeys",4]]]],[[]],[[]],null,null,[[["string",3]],["config",3]],[[["string",3]],["vec",3,[["vec",3]]]],null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["vec",3]],["vec",3]],null,null,null,[[],["f64",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bbox",3]],[[]],[[],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["f64",15],["f64",15]]],[[["f64",15],["f64",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["f64",15]],[[["f64",15]],["f64",15]],[[["bbox",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["f64",15],["f64",15]],["f64",15]],[[],["bbox",3]],[[],["bool",15]],[[],["option",4,[["ordering",4]]]],null,null,[[["f64",15],["bool",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[]],[[]],[[["usize",15]],["chfilter",3]],[[],["option",4]],[[["vec",3],["vec",3]],["vec",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["option",4,[["usize",15]]]]],[[]],[[]],null,null,[[]],[[["usize",15]],["usize",15]],[[]],[[["usize",15],["usize",15]]],[[["vec",3,[["vec",3,[["f64",15]]]]],["f64",15]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],null,[[]],[[["line",3]],["option",4]],[[]],[[],["f64",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[],["f64",15]],[[]],[[],["bool",15]],null,[[["config",3]],["motiondetector",3]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[["config",3]],["stopdetector",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["vec",3]],["vec",3]],[[]],[[]],[[],["bool",15]],null,[[],["timeguard",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[],["bool",15]],null,[[["f64",15]],["timeouthandler",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[["vec",3]],["vec",3]],[[],["vec",3]],[[]],[[]],[[]],[[["vec",3]]],[[],["option",4]],[[["peekable",3,[["iter",3]]],["peekable",3,[["iter",3]]]]],[[["f64",15]]],null,[[["f64",15]]],[[]],[[],["bool",15]],[[]],[[]],[[],["vec",3]],[[]],[[["f64",15],["f64",15]],["vec",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Path"],[3,"BufReader"],[8,"Read"],[3,"StopDetector"],[3,"CHFilter"],[4,"RootCase"],[3,"TimePairs"],[3,"DetourGraph"],[13,"DifferentRoot"],[13,"SameRoot"],[13,"DoubleRoot"],[4,"PathElement"],[4,"PointsForElement"],[3,"PathBuilder"],[3,"PathBuilderError"],[8,"PathTrait"],[13,"Stop"],[13,"Route"],[13,"Stop"],[13,"Route"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"Args"],[3,"ArgsOs"],[3,"JoinPathsError"],[13,"NotUnicode"],[3,"DirEntry"],[3,"Metadata"],[3,"ReadDir"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"DirBuilder"],[4,"ConfigKeys"],[3,"Config"],[3,"Bbox"],[3,"Clustering"],[3,"Line"],[3,"MotionDetector"],[3,"TimeGuard"],[3,"TimeoutHandler"],[3,"Interpolator"],[8,"Monotone"]],"a":{"chdir":[354],"mkdir":[452],"rmdir":[553]}}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};